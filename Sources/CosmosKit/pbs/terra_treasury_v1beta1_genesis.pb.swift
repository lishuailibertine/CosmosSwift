// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: terra/treasury/v1beta1/genesis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// GenesisState defines the oracle module's genesis state.
public struct Terra_Treasury_V1beta1_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var params: Terra_Treasury_V1beta1_Params {
    get {return _storage._params ?? Terra_Treasury_V1beta1_Params()}
    set {_uniqueStorage()._params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  public var hasParams: Bool {return _storage._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  public mutating func clearParams() {_uniqueStorage()._params = nil}

  public var taxRate: String {
    get {return _storage._taxRate}
    set {_uniqueStorage()._taxRate = newValue}
  }

  public var rewardWeight: String {
    get {return _storage._rewardWeight}
    set {_uniqueStorage()._rewardWeight = newValue}
  }

  public var taxCaps: [Terra_Treasury_V1beta1_TaxCap] {
    get {return _storage._taxCaps}
    set {_uniqueStorage()._taxCaps = newValue}
  }

  public var taxProceeds: [Cosmos_Base_V1beta1_Coin] {
    get {return _storage._taxProceeds}
    set {_uniqueStorage()._taxProceeds = newValue}
  }

  public var epochInitialIssuance: [Cosmos_Base_V1beta1_Coin] {
    get {return _storage._epochInitialIssuance}
    set {_uniqueStorage()._epochInitialIssuance = newValue}
  }

  public var epochStates: [Terra_Treasury_V1beta1_EpochState] {
    get {return _storage._epochStates}
    set {_uniqueStorage()._epochStates = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// TaxCap is the max tax amount can be charged for the given denom
public struct Terra_Treasury_V1beta1_TaxCap {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var denom: String = String()

  public var taxCap: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// EpochState is the record for each epoch state
public struct Terra_Treasury_V1beta1_EpochState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var epoch: UInt64 = 0

  public var taxReward: String = String()

  public var seigniorageReward: String = String()

  public var totalStakedLuna: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Terra_Treasury_V1beta1_GenesisState: @unchecked Sendable {}
extension Terra_Treasury_V1beta1_TaxCap: @unchecked Sendable {}
extension Terra_Treasury_V1beta1_EpochState: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "terra.treasury.v1beta1"

extension Terra_Treasury_V1beta1_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GenesisState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "params"),
    2: .standard(proto: "tax_rate"),
    3: .standard(proto: "reward_weight"),
    4: .standard(proto: "tax_caps"),
    5: .standard(proto: "tax_proceeds"),
    6: .standard(proto: "epoch_initial_issuance"),
    7: .standard(proto: "epoch_states"),
  ]

  fileprivate class _StorageClass {
    var _params: Terra_Treasury_V1beta1_Params? = nil
    var _taxRate: String = String()
    var _rewardWeight: String = String()
    var _taxCaps: [Terra_Treasury_V1beta1_TaxCap] = []
    var _taxProceeds: [Cosmos_Base_V1beta1_Coin] = []
    var _epochInitialIssuance: [Cosmos_Base_V1beta1_Coin] = []
    var _epochStates: [Terra_Treasury_V1beta1_EpochState] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _params = source._params
      _taxRate = source._taxRate
      _rewardWeight = source._rewardWeight
      _taxCaps = source._taxCaps
      _taxProceeds = source._taxProceeds
      _epochInitialIssuance = source._epochInitialIssuance
      _epochStates = source._epochStates
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._params) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._taxRate) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._rewardWeight) }()
        case 4: try { try decoder.decodeRepeatedMessageField(value: &_storage._taxCaps) }()
        case 5: try { try decoder.decodeRepeatedMessageField(value: &_storage._taxProceeds) }()
        case 6: try { try decoder.decodeRepeatedMessageField(value: &_storage._epochInitialIssuance) }()
        case 7: try { try decoder.decodeRepeatedMessageField(value: &_storage._epochStates) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._params {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if !_storage._taxRate.isEmpty {
        try visitor.visitSingularStringField(value: _storage._taxRate, fieldNumber: 2)
      }
      if !_storage._rewardWeight.isEmpty {
        try visitor.visitSingularStringField(value: _storage._rewardWeight, fieldNumber: 3)
      }
      if !_storage._taxCaps.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._taxCaps, fieldNumber: 4)
      }
      if !_storage._taxProceeds.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._taxProceeds, fieldNumber: 5)
      }
      if !_storage._epochInitialIssuance.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._epochInitialIssuance, fieldNumber: 6)
      }
      if !_storage._epochStates.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._epochStates, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Terra_Treasury_V1beta1_GenesisState, rhs: Terra_Treasury_V1beta1_GenesisState) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._params != rhs_storage._params {return false}
        if _storage._taxRate != rhs_storage._taxRate {return false}
        if _storage._rewardWeight != rhs_storage._rewardWeight {return false}
        if _storage._taxCaps != rhs_storage._taxCaps {return false}
        if _storage._taxProceeds != rhs_storage._taxProceeds {return false}
        if _storage._epochInitialIssuance != rhs_storage._epochInitialIssuance {return false}
        if _storage._epochStates != rhs_storage._epochStates {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Terra_Treasury_V1beta1_TaxCap: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TaxCap"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "denom"),
    2: .standard(proto: "tax_cap"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.denom) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.taxCap) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.denom.isEmpty {
      try visitor.visitSingularStringField(value: self.denom, fieldNumber: 1)
    }
    if !self.taxCap.isEmpty {
      try visitor.visitSingularStringField(value: self.taxCap, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Terra_Treasury_V1beta1_TaxCap, rhs: Terra_Treasury_V1beta1_TaxCap) -> Bool {
    if lhs.denom != rhs.denom {return false}
    if lhs.taxCap != rhs.taxCap {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Terra_Treasury_V1beta1_EpochState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EpochState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "epoch"),
    2: .standard(proto: "tax_reward"),
    3: .standard(proto: "seigniorage_reward"),
    4: .standard(proto: "total_staked_luna"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.epoch) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.taxReward) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.seigniorageReward) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.totalStakedLuna) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.epoch != 0 {
      try visitor.visitSingularUInt64Field(value: self.epoch, fieldNumber: 1)
    }
    if !self.taxReward.isEmpty {
      try visitor.visitSingularStringField(value: self.taxReward, fieldNumber: 2)
    }
    if !self.seigniorageReward.isEmpty {
      try visitor.visitSingularStringField(value: self.seigniorageReward, fieldNumber: 3)
    }
    if !self.totalStakedLuna.isEmpty {
      try visitor.visitSingularStringField(value: self.totalStakedLuna, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Terra_Treasury_V1beta1_EpochState, rhs: Terra_Treasury_V1beta1_EpochState) -> Bool {
    if lhs.epoch != rhs.epoch {return false}
    if lhs.taxReward != rhs.taxReward {return false}
    if lhs.seigniorageReward != rhs.seigniorageReward {return false}
    if lhs.totalStakedLuna != rhs.totalStakedLuna {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
