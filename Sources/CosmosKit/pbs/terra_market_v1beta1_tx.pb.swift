// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: terra/market/v1beta1/tx.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// MsgSwap represents a message to swap coin to another denom.
public struct Terra_Market_V1beta1_MsgSwap {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var trader: String = String()

  public var offerCoin: Cosmos_Base_V1beta1_Coin {
    get {return _offerCoin ?? Cosmos_Base_V1beta1_Coin()}
    set {_offerCoin = newValue}
  }
  /// Returns true if `offerCoin` has been explicitly set.
  public var hasOfferCoin: Bool {return self._offerCoin != nil}
  /// Clears the value of `offerCoin`. Subsequent reads from it will return its default value.
  public mutating func clearOfferCoin() {self._offerCoin = nil}

  public var askDenom: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _offerCoin: Cosmos_Base_V1beta1_Coin? = nil
}

/// MsgSwapResponse defines the Msg/Swap response type.
public struct Terra_Market_V1beta1_MsgSwapResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var swapCoin: Cosmos_Base_V1beta1_Coin {
    get {return _swapCoin ?? Cosmos_Base_V1beta1_Coin()}
    set {_swapCoin = newValue}
  }
  /// Returns true if `swapCoin` has been explicitly set.
  public var hasSwapCoin: Bool {return self._swapCoin != nil}
  /// Clears the value of `swapCoin`. Subsequent reads from it will return its default value.
  public mutating func clearSwapCoin() {self._swapCoin = nil}

  public var swapFee: Cosmos_Base_V1beta1_Coin {
    get {return _swapFee ?? Cosmos_Base_V1beta1_Coin()}
    set {_swapFee = newValue}
  }
  /// Returns true if `swapFee` has been explicitly set.
  public var hasSwapFee: Bool {return self._swapFee != nil}
  /// Clears the value of `swapFee`. Subsequent reads from it will return its default value.
  public mutating func clearSwapFee() {self._swapFee = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _swapCoin: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _swapFee: Cosmos_Base_V1beta1_Coin? = nil
}

/// MsgSwapSend represents a message to swap coin and send all result coin to recipient
public struct Terra_Market_V1beta1_MsgSwapSend {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var fromAddress: String = String()

  public var toAddress: String = String()

  public var offerCoin: Cosmos_Base_V1beta1_Coin {
    get {return _offerCoin ?? Cosmos_Base_V1beta1_Coin()}
    set {_offerCoin = newValue}
  }
  /// Returns true if `offerCoin` has been explicitly set.
  public var hasOfferCoin: Bool {return self._offerCoin != nil}
  /// Clears the value of `offerCoin`. Subsequent reads from it will return its default value.
  public mutating func clearOfferCoin() {self._offerCoin = nil}

  public var askDenom: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _offerCoin: Cosmos_Base_V1beta1_Coin? = nil
}

/// MsgSwapSendResponse defines the Msg/SwapSend response type.
public struct Terra_Market_V1beta1_MsgSwapSendResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var swapCoin: Cosmos_Base_V1beta1_Coin {
    get {return _swapCoin ?? Cosmos_Base_V1beta1_Coin()}
    set {_swapCoin = newValue}
  }
  /// Returns true if `swapCoin` has been explicitly set.
  public var hasSwapCoin: Bool {return self._swapCoin != nil}
  /// Clears the value of `swapCoin`. Subsequent reads from it will return its default value.
  public mutating func clearSwapCoin() {self._swapCoin = nil}

  public var swapFee: Cosmos_Base_V1beta1_Coin {
    get {return _swapFee ?? Cosmos_Base_V1beta1_Coin()}
    set {_swapFee = newValue}
  }
  /// Returns true if `swapFee` has been explicitly set.
  public var hasSwapFee: Bool {return self._swapFee != nil}
  /// Clears the value of `swapFee`. Subsequent reads from it will return its default value.
  public mutating func clearSwapFee() {self._swapFee = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _swapCoin: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _swapFee: Cosmos_Base_V1beta1_Coin? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Terra_Market_V1beta1_MsgSwap: @unchecked Sendable {}
extension Terra_Market_V1beta1_MsgSwapResponse: @unchecked Sendable {}
extension Terra_Market_V1beta1_MsgSwapSend: @unchecked Sendable {}
extension Terra_Market_V1beta1_MsgSwapSendResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "terra.market.v1beta1"

extension Terra_Market_V1beta1_MsgSwap: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MsgSwap"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "trader"),
    2: .standard(proto: "offer_coin"),
    3: .standard(proto: "ask_denom"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.trader) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._offerCoin) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.askDenom) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.trader.isEmpty {
      try visitor.visitSingularStringField(value: self.trader, fieldNumber: 1)
    }
    try { if let v = self._offerCoin {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.askDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.askDenom, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Terra_Market_V1beta1_MsgSwap, rhs: Terra_Market_V1beta1_MsgSwap) -> Bool {
    if lhs.trader != rhs.trader {return false}
    if lhs._offerCoin != rhs._offerCoin {return false}
    if lhs.askDenom != rhs.askDenom {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Terra_Market_V1beta1_MsgSwapResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MsgSwapResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "swap_coin"),
    2: .standard(proto: "swap_fee"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._swapCoin) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._swapFee) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._swapCoin {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._swapFee {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Terra_Market_V1beta1_MsgSwapResponse, rhs: Terra_Market_V1beta1_MsgSwapResponse) -> Bool {
    if lhs._swapCoin != rhs._swapCoin {return false}
    if lhs._swapFee != rhs._swapFee {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Terra_Market_V1beta1_MsgSwapSend: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MsgSwapSend"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "from_address"),
    2: .standard(proto: "to_address"),
    3: .standard(proto: "offer_coin"),
    4: .standard(proto: "ask_denom"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.fromAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.toAddress) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._offerCoin) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.askDenom) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.fromAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.fromAddress, fieldNumber: 1)
    }
    if !self.toAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.toAddress, fieldNumber: 2)
    }
    try { if let v = self._offerCoin {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.askDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.askDenom, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Terra_Market_V1beta1_MsgSwapSend, rhs: Terra_Market_V1beta1_MsgSwapSend) -> Bool {
    if lhs.fromAddress != rhs.fromAddress {return false}
    if lhs.toAddress != rhs.toAddress {return false}
    if lhs._offerCoin != rhs._offerCoin {return false}
    if lhs.askDenom != rhs.askDenom {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Terra_Market_V1beta1_MsgSwapSendResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MsgSwapSendResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "swap_coin"),
    2: .standard(proto: "swap_fee"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._swapCoin) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._swapFee) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._swapCoin {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._swapFee {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Terra_Market_V1beta1_MsgSwapSendResponse, rhs: Terra_Market_V1beta1_MsgSwapSendResponse) -> Bool {
    if lhs._swapCoin != rhs._swapCoin {return false}
    if lhs._swapFee != rhs._swapFee {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
