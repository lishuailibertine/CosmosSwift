//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: terra/wasm/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Terra_Wasm_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Terra_Wasm_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Terra_Wasm_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func codeInfo(
    _ request: Terra_Wasm_V1beta1_QueryCodeInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Terra_Wasm_V1beta1_QueryCodeInfoRequest, Terra_Wasm_V1beta1_QueryCodeInfoResponse>

  func byteCode(
    _ request: Terra_Wasm_V1beta1_QueryByteCodeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Terra_Wasm_V1beta1_QueryByteCodeRequest, Terra_Wasm_V1beta1_QueryByteCodeResponse>

  func contractInfo(
    _ request: Terra_Wasm_V1beta1_QueryContractInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Terra_Wasm_V1beta1_QueryContractInfoRequest, Terra_Wasm_V1beta1_QueryContractInfoResponse>

  func contractStore(
    _ request: Terra_Wasm_V1beta1_QueryContractStoreRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Terra_Wasm_V1beta1_QueryContractStoreRequest, Terra_Wasm_V1beta1_QueryContractStoreResponse>

  func rawStore(
    _ request: Terra_Wasm_V1beta1_QueryRawStoreRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Terra_Wasm_V1beta1_QueryRawStoreRequest, Terra_Wasm_V1beta1_QueryRawStoreResponse>

  func params(
    _ request: Terra_Wasm_V1beta1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Terra_Wasm_V1beta1_QueryParamsRequest, Terra_Wasm_V1beta1_QueryParamsResponse>
}

extension Terra_Wasm_V1beta1_QueryClientProtocol {
  internal var serviceName: String {
    return "terra.wasm.v1beta1.Query"
  }

  /// CodeInfo returns the stored code info
  ///
  /// - Parameters:
  ///   - request: Request to send to CodeInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func codeInfo(
    _ request: Terra_Wasm_V1beta1_QueryCodeInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Terra_Wasm_V1beta1_QueryCodeInfoRequest, Terra_Wasm_V1beta1_QueryCodeInfoResponse> {
    return self.makeUnaryCall(
      path: "/terra.wasm.v1beta1.Query/CodeInfo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCodeInfoInterceptors() ?? []
    )
  }

  /// ByteCode returns the stored byte code
  ///
  /// - Parameters:
  ///   - request: Request to send to ByteCode.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func byteCode(
    _ request: Terra_Wasm_V1beta1_QueryByteCodeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Terra_Wasm_V1beta1_QueryByteCodeRequest, Terra_Wasm_V1beta1_QueryByteCodeResponse> {
    return self.makeUnaryCall(
      path: "/terra.wasm.v1beta1.Query/ByteCode",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeByteCodeInterceptors() ?? []
    )
  }

  /// ContractInfo returns the stored contract info
  ///
  /// - Parameters:
  ///   - request: Request to send to ContractInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func contractInfo(
    _ request: Terra_Wasm_V1beta1_QueryContractInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Terra_Wasm_V1beta1_QueryContractInfoRequest, Terra_Wasm_V1beta1_QueryContractInfoResponse> {
    return self.makeUnaryCall(
      path: "/terra.wasm.v1beta1.Query/ContractInfo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeContractInfoInterceptors() ?? []
    )
  }

  /// ContractStore return smart query result from the contract
  ///
  /// - Parameters:
  ///   - request: Request to send to ContractStore.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func contractStore(
    _ request: Terra_Wasm_V1beta1_QueryContractStoreRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Terra_Wasm_V1beta1_QueryContractStoreRequest, Terra_Wasm_V1beta1_QueryContractStoreResponse> {
    return self.makeUnaryCall(
      path: "/terra.wasm.v1beta1.Query/ContractStore",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeContractStoreInterceptors() ?? []
    )
  }

  /// RawStore return single key from the raw store data of a contract
  ///
  /// - Parameters:
  ///   - request: Request to send to RawStore.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func rawStore(
    _ request: Terra_Wasm_V1beta1_QueryRawStoreRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Terra_Wasm_V1beta1_QueryRawStoreRequest, Terra_Wasm_V1beta1_QueryRawStoreResponse> {
    return self.makeUnaryCall(
      path: "/terra.wasm.v1beta1.Query/RawStore",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRawStoreInterceptors() ?? []
    )
  }

  /// Params queries all parameters.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Terra_Wasm_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Terra_Wasm_V1beta1_QueryParamsRequest, Terra_Wasm_V1beta1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: "/terra.wasm.v1beta1.Query/Params",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }
}

internal protocol Terra_Wasm_V1beta1_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'codeInfo'.
  func makeCodeInfoInterceptors() -> [ClientInterceptor<Terra_Wasm_V1beta1_QueryCodeInfoRequest, Terra_Wasm_V1beta1_QueryCodeInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'byteCode'.
  func makeByteCodeInterceptors() -> [ClientInterceptor<Terra_Wasm_V1beta1_QueryByteCodeRequest, Terra_Wasm_V1beta1_QueryByteCodeResponse>]

  /// - Returns: Interceptors to use when invoking 'contractInfo'.
  func makeContractInfoInterceptors() -> [ClientInterceptor<Terra_Wasm_V1beta1_QueryContractInfoRequest, Terra_Wasm_V1beta1_QueryContractInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'contractStore'.
  func makeContractStoreInterceptors() -> [ClientInterceptor<Terra_Wasm_V1beta1_QueryContractStoreRequest, Terra_Wasm_V1beta1_QueryContractStoreResponse>]

  /// - Returns: Interceptors to use when invoking 'rawStore'.
  func makeRawStoreInterceptors() -> [ClientInterceptor<Terra_Wasm_V1beta1_QueryRawStoreRequest, Terra_Wasm_V1beta1_QueryRawStoreResponse>]

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Terra_Wasm_V1beta1_QueryParamsRequest, Terra_Wasm_V1beta1_QueryParamsResponse>]
}

internal final class Terra_Wasm_V1beta1_QueryClient: Terra_Wasm_V1beta1_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Terra_Wasm_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the terra.wasm.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Terra_Wasm_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Terra_Wasm_V1beta1_QueryProvider: CallHandlerProvider {
  var interceptors: Terra_Wasm_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// CodeInfo returns the stored code info
  func codeInfo(request: Terra_Wasm_V1beta1_QueryCodeInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Terra_Wasm_V1beta1_QueryCodeInfoResponse>

  /// ByteCode returns the stored byte code
  func byteCode(request: Terra_Wasm_V1beta1_QueryByteCodeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Terra_Wasm_V1beta1_QueryByteCodeResponse>

  /// ContractInfo returns the stored contract info
  func contractInfo(request: Terra_Wasm_V1beta1_QueryContractInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Terra_Wasm_V1beta1_QueryContractInfoResponse>

  /// ContractStore return smart query result from the contract
  func contractStore(request: Terra_Wasm_V1beta1_QueryContractStoreRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Terra_Wasm_V1beta1_QueryContractStoreResponse>

  /// RawStore return single key from the raw store data of a contract
  func rawStore(request: Terra_Wasm_V1beta1_QueryRawStoreRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Terra_Wasm_V1beta1_QueryRawStoreResponse>

  /// Params queries all parameters.
  func params(request: Terra_Wasm_V1beta1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Terra_Wasm_V1beta1_QueryParamsResponse>
}

extension Terra_Wasm_V1beta1_QueryProvider {
  internal var serviceName: Substring { return "terra.wasm.v1beta1.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CodeInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Terra_Wasm_V1beta1_QueryCodeInfoRequest>(),
        responseSerializer: ProtobufSerializer<Terra_Wasm_V1beta1_QueryCodeInfoResponse>(),
        interceptors: self.interceptors?.makeCodeInfoInterceptors() ?? [],
        userFunction: self.codeInfo(request:context:)
      )

    case "ByteCode":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Terra_Wasm_V1beta1_QueryByteCodeRequest>(),
        responseSerializer: ProtobufSerializer<Terra_Wasm_V1beta1_QueryByteCodeResponse>(),
        interceptors: self.interceptors?.makeByteCodeInterceptors() ?? [],
        userFunction: self.byteCode(request:context:)
      )

    case "ContractInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Terra_Wasm_V1beta1_QueryContractInfoRequest>(),
        responseSerializer: ProtobufSerializer<Terra_Wasm_V1beta1_QueryContractInfoResponse>(),
        interceptors: self.interceptors?.makeContractInfoInterceptors() ?? [],
        userFunction: self.contractInfo(request:context:)
      )

    case "ContractStore":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Terra_Wasm_V1beta1_QueryContractStoreRequest>(),
        responseSerializer: ProtobufSerializer<Terra_Wasm_V1beta1_QueryContractStoreResponse>(),
        interceptors: self.interceptors?.makeContractStoreInterceptors() ?? [],
        userFunction: self.contractStore(request:context:)
      )

    case "RawStore":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Terra_Wasm_V1beta1_QueryRawStoreRequest>(),
        responseSerializer: ProtobufSerializer<Terra_Wasm_V1beta1_QueryRawStoreResponse>(),
        interceptors: self.interceptors?.makeRawStoreInterceptors() ?? [],
        userFunction: self.rawStore(request:context:)
      )

    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Terra_Wasm_V1beta1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Terra_Wasm_V1beta1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Terra_Wasm_V1beta1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'codeInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCodeInfoInterceptors() -> [ServerInterceptor<Terra_Wasm_V1beta1_QueryCodeInfoRequest, Terra_Wasm_V1beta1_QueryCodeInfoResponse>]

  /// - Returns: Interceptors to use when handling 'byteCode'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeByteCodeInterceptors() -> [ServerInterceptor<Terra_Wasm_V1beta1_QueryByteCodeRequest, Terra_Wasm_V1beta1_QueryByteCodeResponse>]

  /// - Returns: Interceptors to use when handling 'contractInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeContractInfoInterceptors() -> [ServerInterceptor<Terra_Wasm_V1beta1_QueryContractInfoRequest, Terra_Wasm_V1beta1_QueryContractInfoResponse>]

  /// - Returns: Interceptors to use when handling 'contractStore'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeContractStoreInterceptors() -> [ServerInterceptor<Terra_Wasm_V1beta1_QueryContractStoreRequest, Terra_Wasm_V1beta1_QueryContractStoreResponse>]

  /// - Returns: Interceptors to use when handling 'rawStore'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRawStoreInterceptors() -> [ServerInterceptor<Terra_Wasm_V1beta1_QueryRawStoreRequest, Terra_Wasm_V1beta1_QueryRawStoreResponse>]

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Terra_Wasm_V1beta1_QueryParamsRequest, Terra_Wasm_V1beta1_QueryParamsResponse>]
}
