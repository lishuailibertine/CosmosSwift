//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: terra/treasury/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Terra_Treasury_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Terra_Treasury_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Terra_Treasury_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func taxRate(
    _ request: Terra_Treasury_V1beta1_QueryTaxRateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Terra_Treasury_V1beta1_QueryTaxRateRequest, Terra_Treasury_V1beta1_QueryTaxRateResponse>

  func taxCap(
    _ request: Terra_Treasury_V1beta1_QueryTaxCapRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Terra_Treasury_V1beta1_QueryTaxCapRequest, Terra_Treasury_V1beta1_QueryTaxCapResponse>

  func taxCaps(
    _ request: Terra_Treasury_V1beta1_QueryTaxCapsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Terra_Treasury_V1beta1_QueryTaxCapsRequest, Terra_Treasury_V1beta1_QueryTaxCapsResponse>

  func rewardWeight(
    _ request: Terra_Treasury_V1beta1_QueryRewardWeightRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Terra_Treasury_V1beta1_QueryRewardWeightRequest, Terra_Treasury_V1beta1_QueryRewardWeightResponse>

  func seigniorageProceeds(
    _ request: Terra_Treasury_V1beta1_QuerySeigniorageProceedsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Terra_Treasury_V1beta1_QuerySeigniorageProceedsRequest, Terra_Treasury_V1beta1_QuerySeigniorageProceedsResponse>

  func taxProceeds(
    _ request: Terra_Treasury_V1beta1_QueryTaxProceedsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Terra_Treasury_V1beta1_QueryTaxProceedsRequest, Terra_Treasury_V1beta1_QueryTaxProceedsResponse>

  func indicators(
    _ request: Terra_Treasury_V1beta1_QueryIndicatorsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Terra_Treasury_V1beta1_QueryIndicatorsRequest, Terra_Treasury_V1beta1_QueryIndicatorsResponse>

  func params(
    _ request: Terra_Treasury_V1beta1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Terra_Treasury_V1beta1_QueryParamsRequest, Terra_Treasury_V1beta1_QueryParamsResponse>
}

extension Terra_Treasury_V1beta1_QueryClientProtocol {
  internal var serviceName: String {
    return "terra.treasury.v1beta1.Query"
  }

  /// TaxRate return the current tax rate
  ///
  /// - Parameters:
  ///   - request: Request to send to TaxRate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func taxRate(
    _ request: Terra_Treasury_V1beta1_QueryTaxRateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Terra_Treasury_V1beta1_QueryTaxRateRequest, Terra_Treasury_V1beta1_QueryTaxRateResponse> {
    return self.makeUnaryCall(
      path: "/terra.treasury.v1beta1.Query/TaxRate",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTaxRateInterceptors() ?? []
    )
  }

  /// TaxCap returns the tax cap of a denom
  ///
  /// - Parameters:
  ///   - request: Request to send to TaxCap.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func taxCap(
    _ request: Terra_Treasury_V1beta1_QueryTaxCapRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Terra_Treasury_V1beta1_QueryTaxCapRequest, Terra_Treasury_V1beta1_QueryTaxCapResponse> {
    return self.makeUnaryCall(
      path: "/terra.treasury.v1beta1.Query/TaxCap",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTaxCapInterceptors() ?? []
    )
  }

  /// TaxCaps returns the all tax caps
  ///
  /// - Parameters:
  ///   - request: Request to send to TaxCaps.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func taxCaps(
    _ request: Terra_Treasury_V1beta1_QueryTaxCapsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Terra_Treasury_V1beta1_QueryTaxCapsRequest, Terra_Treasury_V1beta1_QueryTaxCapsResponse> {
    return self.makeUnaryCall(
      path: "/terra.treasury.v1beta1.Query/TaxCaps",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTaxCapsInterceptors() ?? []
    )
  }

  /// RewardWeight return the current reward weight
  ///
  /// - Parameters:
  ///   - request: Request to send to RewardWeight.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func rewardWeight(
    _ request: Terra_Treasury_V1beta1_QueryRewardWeightRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Terra_Treasury_V1beta1_QueryRewardWeightRequest, Terra_Treasury_V1beta1_QueryRewardWeightResponse> {
    return self.makeUnaryCall(
      path: "/terra.treasury.v1beta1.Query/RewardWeight",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRewardWeightInterceptors() ?? []
    )
  }

  /// SeigniorageProceeds return the current seigniorage proceeds
  ///
  /// - Parameters:
  ///   - request: Request to send to SeigniorageProceeds.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func seigniorageProceeds(
    _ request: Terra_Treasury_V1beta1_QuerySeigniorageProceedsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Terra_Treasury_V1beta1_QuerySeigniorageProceedsRequest, Terra_Treasury_V1beta1_QuerySeigniorageProceedsResponse> {
    return self.makeUnaryCall(
      path: "/terra.treasury.v1beta1.Query/SeigniorageProceeds",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSeigniorageProceedsInterceptors() ?? []
    )
  }

  /// TaxProceeds return the current tax proceeds
  ///
  /// - Parameters:
  ///   - request: Request to send to TaxProceeds.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func taxProceeds(
    _ request: Terra_Treasury_V1beta1_QueryTaxProceedsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Terra_Treasury_V1beta1_QueryTaxProceedsRequest, Terra_Treasury_V1beta1_QueryTaxProceedsResponse> {
    return self.makeUnaryCall(
      path: "/terra.treasury.v1beta1.Query/TaxProceeds",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTaxProceedsInterceptors() ?? []
    )
  }

  /// Indicators return the current trl informations
  ///
  /// - Parameters:
  ///   - request: Request to send to Indicators.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func indicators(
    _ request: Terra_Treasury_V1beta1_QueryIndicatorsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Terra_Treasury_V1beta1_QueryIndicatorsRequest, Terra_Treasury_V1beta1_QueryIndicatorsResponse> {
    return self.makeUnaryCall(
      path: "/terra.treasury.v1beta1.Query/Indicators",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIndicatorsInterceptors() ?? []
    )
  }

  /// Params queries all parameters.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Terra_Treasury_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Terra_Treasury_V1beta1_QueryParamsRequest, Terra_Treasury_V1beta1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: "/terra.treasury.v1beta1.Query/Params",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }
}

internal protocol Terra_Treasury_V1beta1_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'taxRate'.
  func makeTaxRateInterceptors() -> [ClientInterceptor<Terra_Treasury_V1beta1_QueryTaxRateRequest, Terra_Treasury_V1beta1_QueryTaxRateResponse>]

  /// - Returns: Interceptors to use when invoking 'taxCap'.
  func makeTaxCapInterceptors() -> [ClientInterceptor<Terra_Treasury_V1beta1_QueryTaxCapRequest, Terra_Treasury_V1beta1_QueryTaxCapResponse>]

  /// - Returns: Interceptors to use when invoking 'taxCaps'.
  func makeTaxCapsInterceptors() -> [ClientInterceptor<Terra_Treasury_V1beta1_QueryTaxCapsRequest, Terra_Treasury_V1beta1_QueryTaxCapsResponse>]

  /// - Returns: Interceptors to use when invoking 'rewardWeight'.
  func makeRewardWeightInterceptors() -> [ClientInterceptor<Terra_Treasury_V1beta1_QueryRewardWeightRequest, Terra_Treasury_V1beta1_QueryRewardWeightResponse>]

  /// - Returns: Interceptors to use when invoking 'seigniorageProceeds'.
  func makeSeigniorageProceedsInterceptors() -> [ClientInterceptor<Terra_Treasury_V1beta1_QuerySeigniorageProceedsRequest, Terra_Treasury_V1beta1_QuerySeigniorageProceedsResponse>]

  /// - Returns: Interceptors to use when invoking 'taxProceeds'.
  func makeTaxProceedsInterceptors() -> [ClientInterceptor<Terra_Treasury_V1beta1_QueryTaxProceedsRequest, Terra_Treasury_V1beta1_QueryTaxProceedsResponse>]

  /// - Returns: Interceptors to use when invoking 'indicators'.
  func makeIndicatorsInterceptors() -> [ClientInterceptor<Terra_Treasury_V1beta1_QueryIndicatorsRequest, Terra_Treasury_V1beta1_QueryIndicatorsResponse>]

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Terra_Treasury_V1beta1_QueryParamsRequest, Terra_Treasury_V1beta1_QueryParamsResponse>]
}

internal final class Terra_Treasury_V1beta1_QueryClient: Terra_Treasury_V1beta1_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Terra_Treasury_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the terra.treasury.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Terra_Treasury_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Terra_Treasury_V1beta1_QueryProvider: CallHandlerProvider {
  var interceptors: Terra_Treasury_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// TaxRate return the current tax rate
  func taxRate(request: Terra_Treasury_V1beta1_QueryTaxRateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Terra_Treasury_V1beta1_QueryTaxRateResponse>

  /// TaxCap returns the tax cap of a denom
  func taxCap(request: Terra_Treasury_V1beta1_QueryTaxCapRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Terra_Treasury_V1beta1_QueryTaxCapResponse>

  /// TaxCaps returns the all tax caps
  func taxCaps(request: Terra_Treasury_V1beta1_QueryTaxCapsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Terra_Treasury_V1beta1_QueryTaxCapsResponse>

  /// RewardWeight return the current reward weight
  func rewardWeight(request: Terra_Treasury_V1beta1_QueryRewardWeightRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Terra_Treasury_V1beta1_QueryRewardWeightResponse>

  /// SeigniorageProceeds return the current seigniorage proceeds
  func seigniorageProceeds(request: Terra_Treasury_V1beta1_QuerySeigniorageProceedsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Terra_Treasury_V1beta1_QuerySeigniorageProceedsResponse>

  /// TaxProceeds return the current tax proceeds
  func taxProceeds(request: Terra_Treasury_V1beta1_QueryTaxProceedsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Terra_Treasury_V1beta1_QueryTaxProceedsResponse>

  /// Indicators return the current trl informations
  func indicators(request: Terra_Treasury_V1beta1_QueryIndicatorsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Terra_Treasury_V1beta1_QueryIndicatorsResponse>

  /// Params queries all parameters.
  func params(request: Terra_Treasury_V1beta1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Terra_Treasury_V1beta1_QueryParamsResponse>
}

extension Terra_Treasury_V1beta1_QueryProvider {
  internal var serviceName: Substring { return "terra.treasury.v1beta1.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "TaxRate":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Terra_Treasury_V1beta1_QueryTaxRateRequest>(),
        responseSerializer: ProtobufSerializer<Terra_Treasury_V1beta1_QueryTaxRateResponse>(),
        interceptors: self.interceptors?.makeTaxRateInterceptors() ?? [],
        userFunction: self.taxRate(request:context:)
      )

    case "TaxCap":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Terra_Treasury_V1beta1_QueryTaxCapRequest>(),
        responseSerializer: ProtobufSerializer<Terra_Treasury_V1beta1_QueryTaxCapResponse>(),
        interceptors: self.interceptors?.makeTaxCapInterceptors() ?? [],
        userFunction: self.taxCap(request:context:)
      )

    case "TaxCaps":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Terra_Treasury_V1beta1_QueryTaxCapsRequest>(),
        responseSerializer: ProtobufSerializer<Terra_Treasury_V1beta1_QueryTaxCapsResponse>(),
        interceptors: self.interceptors?.makeTaxCapsInterceptors() ?? [],
        userFunction: self.taxCaps(request:context:)
      )

    case "RewardWeight":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Terra_Treasury_V1beta1_QueryRewardWeightRequest>(),
        responseSerializer: ProtobufSerializer<Terra_Treasury_V1beta1_QueryRewardWeightResponse>(),
        interceptors: self.interceptors?.makeRewardWeightInterceptors() ?? [],
        userFunction: self.rewardWeight(request:context:)
      )

    case "SeigniorageProceeds":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Terra_Treasury_V1beta1_QuerySeigniorageProceedsRequest>(),
        responseSerializer: ProtobufSerializer<Terra_Treasury_V1beta1_QuerySeigniorageProceedsResponse>(),
        interceptors: self.interceptors?.makeSeigniorageProceedsInterceptors() ?? [],
        userFunction: self.seigniorageProceeds(request:context:)
      )

    case "TaxProceeds":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Terra_Treasury_V1beta1_QueryTaxProceedsRequest>(),
        responseSerializer: ProtobufSerializer<Terra_Treasury_V1beta1_QueryTaxProceedsResponse>(),
        interceptors: self.interceptors?.makeTaxProceedsInterceptors() ?? [],
        userFunction: self.taxProceeds(request:context:)
      )

    case "Indicators":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Terra_Treasury_V1beta1_QueryIndicatorsRequest>(),
        responseSerializer: ProtobufSerializer<Terra_Treasury_V1beta1_QueryIndicatorsResponse>(),
        interceptors: self.interceptors?.makeIndicatorsInterceptors() ?? [],
        userFunction: self.indicators(request:context:)
      )

    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Terra_Treasury_V1beta1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Terra_Treasury_V1beta1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Terra_Treasury_V1beta1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'taxRate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTaxRateInterceptors() -> [ServerInterceptor<Terra_Treasury_V1beta1_QueryTaxRateRequest, Terra_Treasury_V1beta1_QueryTaxRateResponse>]

  /// - Returns: Interceptors to use when handling 'taxCap'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTaxCapInterceptors() -> [ServerInterceptor<Terra_Treasury_V1beta1_QueryTaxCapRequest, Terra_Treasury_V1beta1_QueryTaxCapResponse>]

  /// - Returns: Interceptors to use when handling 'taxCaps'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTaxCapsInterceptors() -> [ServerInterceptor<Terra_Treasury_V1beta1_QueryTaxCapsRequest, Terra_Treasury_V1beta1_QueryTaxCapsResponse>]

  /// - Returns: Interceptors to use when handling 'rewardWeight'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRewardWeightInterceptors() -> [ServerInterceptor<Terra_Treasury_V1beta1_QueryRewardWeightRequest, Terra_Treasury_V1beta1_QueryRewardWeightResponse>]

  /// - Returns: Interceptors to use when handling 'seigniorageProceeds'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSeigniorageProceedsInterceptors() -> [ServerInterceptor<Terra_Treasury_V1beta1_QuerySeigniorageProceedsRequest, Terra_Treasury_V1beta1_QuerySeigniorageProceedsResponse>]

  /// - Returns: Interceptors to use when handling 'taxProceeds'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTaxProceedsInterceptors() -> [ServerInterceptor<Terra_Treasury_V1beta1_QueryTaxProceedsRequest, Terra_Treasury_V1beta1_QueryTaxProceedsResponse>]

  /// - Returns: Interceptors to use when handling 'indicators'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeIndicatorsInterceptors() -> [ServerInterceptor<Terra_Treasury_V1beta1_QueryIndicatorsRequest, Terra_Treasury_V1beta1_QueryIndicatorsResponse>]

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Terra_Treasury_V1beta1_QueryParamsRequest, Terra_Treasury_V1beta1_QueryParamsResponse>]
}
