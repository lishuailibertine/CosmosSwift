// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: terra/treasury/v1beta1/treasury.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Params defines the parameters for the oracle module.
public struct Terra_Treasury_V1beta1_Params {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var taxPolicy: Terra_Treasury_V1beta1_PolicyConstraints {
    get {return _taxPolicy ?? Terra_Treasury_V1beta1_PolicyConstraints()}
    set {_taxPolicy = newValue}
  }
  /// Returns true if `taxPolicy` has been explicitly set.
  public var hasTaxPolicy: Bool {return self._taxPolicy != nil}
  /// Clears the value of `taxPolicy`. Subsequent reads from it will return its default value.
  public mutating func clearTaxPolicy() {self._taxPolicy = nil}

  public var rewardPolicy: Terra_Treasury_V1beta1_PolicyConstraints {
    get {return _rewardPolicy ?? Terra_Treasury_V1beta1_PolicyConstraints()}
    set {_rewardPolicy = newValue}
  }
  /// Returns true if `rewardPolicy` has been explicitly set.
  public var hasRewardPolicy: Bool {return self._rewardPolicy != nil}
  /// Clears the value of `rewardPolicy`. Subsequent reads from it will return its default value.
  public mutating func clearRewardPolicy() {self._rewardPolicy = nil}

  public var seigniorageBurdenTarget: String = String()

  public var miningIncrement: String = String()

  public var windowShort: UInt64 = 0

  public var windowLong: UInt64 = 0

  public var windowProbation: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _taxPolicy: Terra_Treasury_V1beta1_PolicyConstraints? = nil
  fileprivate var _rewardPolicy: Terra_Treasury_V1beta1_PolicyConstraints? = nil
}

/// PolicyConstraints - defines policy constraints can be applied in tax & reward policies
public struct Terra_Treasury_V1beta1_PolicyConstraints {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var rateMin: String = String()

  public var rateMax: String = String()

  public var cap: Cosmos_Base_V1beta1_Coin {
    get {return _cap ?? Cosmos_Base_V1beta1_Coin()}
    set {_cap = newValue}
  }
  /// Returns true if `cap` has been explicitly set.
  public var hasCap: Bool {return self._cap != nil}
  /// Clears the value of `cap`. Subsequent reads from it will return its default value.
  public mutating func clearCap() {self._cap = nil}

  public var changeRateMax: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _cap: Cosmos_Base_V1beta1_Coin? = nil
}

/// EpochTaxProceeds represents the tax amount
/// collected at the current epoch
public struct Terra_Treasury_V1beta1_EpochTaxProceeds {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var taxProceeds: [Cosmos_Base_V1beta1_Coin] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// EpochInitialIssuance represents initial issuance
/// of the currrent epoch
public struct Terra_Treasury_V1beta1_EpochInitialIssuance {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var issuance: [Cosmos_Base_V1beta1_Coin] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Terra_Treasury_V1beta1_Params: @unchecked Sendable {}
extension Terra_Treasury_V1beta1_PolicyConstraints: @unchecked Sendable {}
extension Terra_Treasury_V1beta1_EpochTaxProceeds: @unchecked Sendable {}
extension Terra_Treasury_V1beta1_EpochInitialIssuance: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "terra.treasury.v1beta1"

extension Terra_Treasury_V1beta1_Params: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Params"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "tax_policy"),
    2: .standard(proto: "reward_policy"),
    3: .standard(proto: "seigniorage_burden_target"),
    4: .standard(proto: "mining_increment"),
    5: .standard(proto: "window_short"),
    6: .standard(proto: "window_long"),
    7: .standard(proto: "window_probation"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._taxPolicy) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._rewardPolicy) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.seigniorageBurdenTarget) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.miningIncrement) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.windowShort) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.windowLong) }()
      case 7: try { try decoder.decodeSingularUInt64Field(value: &self.windowProbation) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._taxPolicy {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._rewardPolicy {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.seigniorageBurdenTarget.isEmpty {
      try visitor.visitSingularStringField(value: self.seigniorageBurdenTarget, fieldNumber: 3)
    }
    if !self.miningIncrement.isEmpty {
      try visitor.visitSingularStringField(value: self.miningIncrement, fieldNumber: 4)
    }
    if self.windowShort != 0 {
      try visitor.visitSingularUInt64Field(value: self.windowShort, fieldNumber: 5)
    }
    if self.windowLong != 0 {
      try visitor.visitSingularUInt64Field(value: self.windowLong, fieldNumber: 6)
    }
    if self.windowProbation != 0 {
      try visitor.visitSingularUInt64Field(value: self.windowProbation, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Terra_Treasury_V1beta1_Params, rhs: Terra_Treasury_V1beta1_Params) -> Bool {
    if lhs._taxPolicy != rhs._taxPolicy {return false}
    if lhs._rewardPolicy != rhs._rewardPolicy {return false}
    if lhs.seigniorageBurdenTarget != rhs.seigniorageBurdenTarget {return false}
    if lhs.miningIncrement != rhs.miningIncrement {return false}
    if lhs.windowShort != rhs.windowShort {return false}
    if lhs.windowLong != rhs.windowLong {return false}
    if lhs.windowProbation != rhs.windowProbation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Terra_Treasury_V1beta1_PolicyConstraints: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PolicyConstraints"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "rate_min"),
    2: .standard(proto: "rate_max"),
    3: .same(proto: "cap"),
    4: .standard(proto: "change_rate_max"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.rateMin) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.rateMax) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._cap) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.changeRateMax) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.rateMin.isEmpty {
      try visitor.visitSingularStringField(value: self.rateMin, fieldNumber: 1)
    }
    if !self.rateMax.isEmpty {
      try visitor.visitSingularStringField(value: self.rateMax, fieldNumber: 2)
    }
    try { if let v = self._cap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.changeRateMax.isEmpty {
      try visitor.visitSingularStringField(value: self.changeRateMax, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Terra_Treasury_V1beta1_PolicyConstraints, rhs: Terra_Treasury_V1beta1_PolicyConstraints) -> Bool {
    if lhs.rateMin != rhs.rateMin {return false}
    if lhs.rateMax != rhs.rateMax {return false}
    if lhs._cap != rhs._cap {return false}
    if lhs.changeRateMax != rhs.changeRateMax {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Terra_Treasury_V1beta1_EpochTaxProceeds: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EpochTaxProceeds"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "tax_proceeds"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.taxProceeds) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.taxProceeds.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.taxProceeds, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Terra_Treasury_V1beta1_EpochTaxProceeds, rhs: Terra_Treasury_V1beta1_EpochTaxProceeds) -> Bool {
    if lhs.taxProceeds != rhs.taxProceeds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Terra_Treasury_V1beta1_EpochInitialIssuance: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EpochInitialIssuance"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "issuance"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.issuance) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.issuance.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.issuance, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Terra_Treasury_V1beta1_EpochInitialIssuance, rhs: Terra_Treasury_V1beta1_EpochInitialIssuance) -> Bool {
    if lhs.issuance != rhs.issuance {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
