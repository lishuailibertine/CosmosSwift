//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: terra/tx/v1beta1/service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Service defines a gRPC service for interacting with transactions.
///
/// Usage: instantiate `Terra_Tx_V1beta1_ServiceClient`, then call methods of this protocol to make API calls.
internal protocol Terra_Tx_V1beta1_ServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Terra_Tx_V1beta1_ServiceClientInterceptorFactoryProtocol? { get }

  func computeTax(
    _ request: Terra_Tx_V1beta1_ComputeTaxRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Terra_Tx_V1beta1_ComputeTaxRequest, Terra_Tx_V1beta1_ComputeTaxResponse>
}

extension Terra_Tx_V1beta1_ServiceClientProtocol {
  internal var serviceName: String {
    return "terra.tx.v1beta1.Service"
  }

  /// EstimateFee simulates executing a transaction for estimating gas usage.
  ///
  /// - Parameters:
  ///   - request: Request to send to ComputeTax.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func computeTax(
    _ request: Terra_Tx_V1beta1_ComputeTaxRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Terra_Tx_V1beta1_ComputeTaxRequest, Terra_Tx_V1beta1_ComputeTaxResponse> {
    return self.makeUnaryCall(
      path: "/terra.tx.v1beta1.Service/ComputeTax",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeComputeTaxInterceptors() ?? []
    )
  }
}

internal protocol Terra_Tx_V1beta1_ServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'computeTax'.
  func makeComputeTaxInterceptors() -> [ClientInterceptor<Terra_Tx_V1beta1_ComputeTaxRequest, Terra_Tx_V1beta1_ComputeTaxResponse>]
}

internal final class Terra_Tx_V1beta1_ServiceClient: Terra_Tx_V1beta1_ServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Terra_Tx_V1beta1_ServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the terra.tx.v1beta1.Service service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Terra_Tx_V1beta1_ServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Service defines a gRPC service for interacting with transactions.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Terra_Tx_V1beta1_ServiceProvider: CallHandlerProvider {
  var interceptors: Terra_Tx_V1beta1_ServiceServerInterceptorFactoryProtocol? { get }

  /// EstimateFee simulates executing a transaction for estimating gas usage.
  func computeTax(request: Terra_Tx_V1beta1_ComputeTaxRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Terra_Tx_V1beta1_ComputeTaxResponse>
}

extension Terra_Tx_V1beta1_ServiceProvider {
  internal var serviceName: Substring { return "terra.tx.v1beta1.Service" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ComputeTax":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Terra_Tx_V1beta1_ComputeTaxRequest>(),
        responseSerializer: ProtobufSerializer<Terra_Tx_V1beta1_ComputeTaxResponse>(),
        interceptors: self.interceptors?.makeComputeTaxInterceptors() ?? [],
        userFunction: self.computeTax(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Terra_Tx_V1beta1_ServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'computeTax'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeComputeTaxInterceptors() -> [ServerInterceptor<Terra_Tx_V1beta1_ComputeTaxRequest, Terra_Tx_V1beta1_ComputeTaxResponse>]
}
