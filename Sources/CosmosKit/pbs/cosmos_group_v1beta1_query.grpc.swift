//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: cosmos/group/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Query is the cosmos.group.v1beta1 Query service.
///
/// Usage: instantiate `Cosmos_Group_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Cosmos_Group_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Cosmos_Group_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func groupInfo(
    _ request: Cosmos_Group_V1beta1_QueryGroupInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1beta1_QueryGroupInfoRequest, Cosmos_Group_V1beta1_QueryGroupInfoResponse>

  func groupPolicyInfo(
    _ request: Cosmos_Group_V1beta1_QueryGroupPolicyInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1beta1_QueryGroupPolicyInfoRequest, Cosmos_Group_V1beta1_QueryGroupPolicyInfoResponse>

  func groupMembers(
    _ request: Cosmos_Group_V1beta1_QueryGroupMembersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1beta1_QueryGroupMembersRequest, Cosmos_Group_V1beta1_QueryGroupMembersResponse>

  func groupsByAdmin(
    _ request: Cosmos_Group_V1beta1_QueryGroupsByAdminRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1beta1_QueryGroupsByAdminRequest, Cosmos_Group_V1beta1_QueryGroupsByAdminResponse>

  func groupPoliciesByGroup(
    _ request: Cosmos_Group_V1beta1_QueryGroupPoliciesByGroupRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1beta1_QueryGroupPoliciesByGroupRequest, Cosmos_Group_V1beta1_QueryGroupPoliciesByGroupResponse>

  func groupPoliciesByAdmin(
    _ request: Cosmos_Group_V1beta1_QueryGroupPoliciesByAdminRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1beta1_QueryGroupPoliciesByAdminRequest, Cosmos_Group_V1beta1_QueryGroupPoliciesByAdminResponse>

  func proposal(
    _ request: Cosmos_Group_V1beta1_QueryProposalRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1beta1_QueryProposalRequest, Cosmos_Group_V1beta1_QueryProposalResponse>

  func proposalsByGroupPolicy(
    _ request: Cosmos_Group_V1beta1_QueryProposalsByGroupPolicyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1beta1_QueryProposalsByGroupPolicyRequest, Cosmos_Group_V1beta1_QueryProposalsByGroupPolicyResponse>

  func voteByProposalVoter(
    _ request: Cosmos_Group_V1beta1_QueryVoteByProposalVoterRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1beta1_QueryVoteByProposalVoterRequest, Cosmos_Group_V1beta1_QueryVoteByProposalVoterResponse>

  func votesByProposal(
    _ request: Cosmos_Group_V1beta1_QueryVotesByProposalRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1beta1_QueryVotesByProposalRequest, Cosmos_Group_V1beta1_QueryVotesByProposalResponse>

  func votesByVoter(
    _ request: Cosmos_Group_V1beta1_QueryVotesByVoterRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1beta1_QueryVotesByVoterRequest, Cosmos_Group_V1beta1_QueryVotesByVoterResponse>

  func groupsByMember(
    _ request: Cosmos_Group_V1beta1_QueryGroupsByMemberRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1beta1_QueryGroupsByMemberRequest, Cosmos_Group_V1beta1_QueryGroupsByMemberResponse>

  func tallyResult(
    _ request: Cosmos_Group_V1beta1_QueryTallyResultRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1beta1_QueryTallyResultRequest, Cosmos_Group_V1beta1_QueryTallyResultResponse>
}

extension Cosmos_Group_V1beta1_QueryClientProtocol {
  internal var serviceName: String {
    return "cosmos.group.v1beta1.Query"
  }

  /// GroupInfo queries group info based on group id.
  ///
  /// - Parameters:
  ///   - request: Request to send to GroupInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func groupInfo(
    _ request: Cosmos_Group_V1beta1_QueryGroupInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1beta1_QueryGroupInfoRequest, Cosmos_Group_V1beta1_QueryGroupInfoResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.group.v1beta1.Query/GroupInfo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupInfoInterceptors() ?? []
    )
  }

  /// GroupPolicyInfo queries group policy info based on account address of group policy.
  ///
  /// - Parameters:
  ///   - request: Request to send to GroupPolicyInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func groupPolicyInfo(
    _ request: Cosmos_Group_V1beta1_QueryGroupPolicyInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1beta1_QueryGroupPolicyInfoRequest, Cosmos_Group_V1beta1_QueryGroupPolicyInfoResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.group.v1beta1.Query/GroupPolicyInfo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupPolicyInfoInterceptors() ?? []
    )
  }

  /// GroupMembers queries members of a group
  ///
  /// - Parameters:
  ///   - request: Request to send to GroupMembers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func groupMembers(
    _ request: Cosmos_Group_V1beta1_QueryGroupMembersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1beta1_QueryGroupMembersRequest, Cosmos_Group_V1beta1_QueryGroupMembersResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.group.v1beta1.Query/GroupMembers",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupMembersInterceptors() ?? []
    )
  }

  /// GroupsByAdmin queries groups by admin address.
  ///
  /// - Parameters:
  ///   - request: Request to send to GroupsByAdmin.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func groupsByAdmin(
    _ request: Cosmos_Group_V1beta1_QueryGroupsByAdminRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1beta1_QueryGroupsByAdminRequest, Cosmos_Group_V1beta1_QueryGroupsByAdminResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.group.v1beta1.Query/GroupsByAdmin",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupsByAdminInterceptors() ?? []
    )
  }

  /// GroupPoliciesByGroup queries group policies by group id.
  ///
  /// - Parameters:
  ///   - request: Request to send to GroupPoliciesByGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func groupPoliciesByGroup(
    _ request: Cosmos_Group_V1beta1_QueryGroupPoliciesByGroupRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1beta1_QueryGroupPoliciesByGroupRequest, Cosmos_Group_V1beta1_QueryGroupPoliciesByGroupResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.group.v1beta1.Query/GroupPoliciesByGroup",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupPoliciesByGroupInterceptors() ?? []
    )
  }

  /// GroupsByAdmin queries group policies by admin address.
  ///
  /// - Parameters:
  ///   - request: Request to send to GroupPoliciesByAdmin.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func groupPoliciesByAdmin(
    _ request: Cosmos_Group_V1beta1_QueryGroupPoliciesByAdminRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1beta1_QueryGroupPoliciesByAdminRequest, Cosmos_Group_V1beta1_QueryGroupPoliciesByAdminResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.group.v1beta1.Query/GroupPoliciesByAdmin",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupPoliciesByAdminInterceptors() ?? []
    )
  }

  /// Proposal queries a proposal based on proposal id.
  ///
  /// - Parameters:
  ///   - request: Request to send to Proposal.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func proposal(
    _ request: Cosmos_Group_V1beta1_QueryProposalRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1beta1_QueryProposalRequest, Cosmos_Group_V1beta1_QueryProposalResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.group.v1beta1.Query/Proposal",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProposalInterceptors() ?? []
    )
  }

  /// ProposalsByGroupPolicy queries proposals based on account address of group policy.
  ///
  /// - Parameters:
  ///   - request: Request to send to ProposalsByGroupPolicy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func proposalsByGroupPolicy(
    _ request: Cosmos_Group_V1beta1_QueryProposalsByGroupPolicyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1beta1_QueryProposalsByGroupPolicyRequest, Cosmos_Group_V1beta1_QueryProposalsByGroupPolicyResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.group.v1beta1.Query/ProposalsByGroupPolicy",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProposalsByGroupPolicyInterceptors() ?? []
    )
  }

  /// VoteByProposalVoter queries a vote by proposal id and voter.
  ///
  /// - Parameters:
  ///   - request: Request to send to VoteByProposalVoter.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func voteByProposalVoter(
    _ request: Cosmos_Group_V1beta1_QueryVoteByProposalVoterRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1beta1_QueryVoteByProposalVoterRequest, Cosmos_Group_V1beta1_QueryVoteByProposalVoterResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.group.v1beta1.Query/VoteByProposalVoter",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVoteByProposalVoterInterceptors() ?? []
    )
  }

  /// VotesByProposal queries a vote by proposal.
  ///
  /// - Parameters:
  ///   - request: Request to send to VotesByProposal.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func votesByProposal(
    _ request: Cosmos_Group_V1beta1_QueryVotesByProposalRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1beta1_QueryVotesByProposalRequest, Cosmos_Group_V1beta1_QueryVotesByProposalResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.group.v1beta1.Query/VotesByProposal",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVotesByProposalInterceptors() ?? []
    )
  }

  /// VotesByVoter queries a vote by voter.
  ///
  /// - Parameters:
  ///   - request: Request to send to VotesByVoter.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func votesByVoter(
    _ request: Cosmos_Group_V1beta1_QueryVotesByVoterRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1beta1_QueryVotesByVoterRequest, Cosmos_Group_V1beta1_QueryVotesByVoterResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.group.v1beta1.Query/VotesByVoter",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVotesByVoterInterceptors() ?? []
    )
  }

  /// GroupsByMember queries groups by member address.
  ///
  /// - Parameters:
  ///   - request: Request to send to GroupsByMember.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func groupsByMember(
    _ request: Cosmos_Group_V1beta1_QueryGroupsByMemberRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1beta1_QueryGroupsByMemberRequest, Cosmos_Group_V1beta1_QueryGroupsByMemberResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.group.v1beta1.Query/GroupsByMember",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupsByMemberInterceptors() ?? []
    )
  }

  /// TallyResult queries the tally of a proposal votes.
  ///
  /// - Parameters:
  ///   - request: Request to send to TallyResult.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func tallyResult(
    _ request: Cosmos_Group_V1beta1_QueryTallyResultRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1beta1_QueryTallyResultRequest, Cosmos_Group_V1beta1_QueryTallyResultResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.group.v1beta1.Query/TallyResult",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTallyResultInterceptors() ?? []
    )
  }
}

internal protocol Cosmos_Group_V1beta1_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'groupInfo'.
  func makeGroupInfoInterceptors() -> [ClientInterceptor<Cosmos_Group_V1beta1_QueryGroupInfoRequest, Cosmos_Group_V1beta1_QueryGroupInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'groupPolicyInfo'.
  func makeGroupPolicyInfoInterceptors() -> [ClientInterceptor<Cosmos_Group_V1beta1_QueryGroupPolicyInfoRequest, Cosmos_Group_V1beta1_QueryGroupPolicyInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'groupMembers'.
  func makeGroupMembersInterceptors() -> [ClientInterceptor<Cosmos_Group_V1beta1_QueryGroupMembersRequest, Cosmos_Group_V1beta1_QueryGroupMembersResponse>]

  /// - Returns: Interceptors to use when invoking 'groupsByAdmin'.
  func makeGroupsByAdminInterceptors() -> [ClientInterceptor<Cosmos_Group_V1beta1_QueryGroupsByAdminRequest, Cosmos_Group_V1beta1_QueryGroupsByAdminResponse>]

  /// - Returns: Interceptors to use when invoking 'groupPoliciesByGroup'.
  func makeGroupPoliciesByGroupInterceptors() -> [ClientInterceptor<Cosmos_Group_V1beta1_QueryGroupPoliciesByGroupRequest, Cosmos_Group_V1beta1_QueryGroupPoliciesByGroupResponse>]

  /// - Returns: Interceptors to use when invoking 'groupPoliciesByAdmin'.
  func makeGroupPoliciesByAdminInterceptors() -> [ClientInterceptor<Cosmos_Group_V1beta1_QueryGroupPoliciesByAdminRequest, Cosmos_Group_V1beta1_QueryGroupPoliciesByAdminResponse>]

  /// - Returns: Interceptors to use when invoking 'proposal'.
  func makeProposalInterceptors() -> [ClientInterceptor<Cosmos_Group_V1beta1_QueryProposalRequest, Cosmos_Group_V1beta1_QueryProposalResponse>]

  /// - Returns: Interceptors to use when invoking 'proposalsByGroupPolicy'.
  func makeProposalsByGroupPolicyInterceptors() -> [ClientInterceptor<Cosmos_Group_V1beta1_QueryProposalsByGroupPolicyRequest, Cosmos_Group_V1beta1_QueryProposalsByGroupPolicyResponse>]

  /// - Returns: Interceptors to use when invoking 'voteByProposalVoter'.
  func makeVoteByProposalVoterInterceptors() -> [ClientInterceptor<Cosmos_Group_V1beta1_QueryVoteByProposalVoterRequest, Cosmos_Group_V1beta1_QueryVoteByProposalVoterResponse>]

  /// - Returns: Interceptors to use when invoking 'votesByProposal'.
  func makeVotesByProposalInterceptors() -> [ClientInterceptor<Cosmos_Group_V1beta1_QueryVotesByProposalRequest, Cosmos_Group_V1beta1_QueryVotesByProposalResponse>]

  /// - Returns: Interceptors to use when invoking 'votesByVoter'.
  func makeVotesByVoterInterceptors() -> [ClientInterceptor<Cosmos_Group_V1beta1_QueryVotesByVoterRequest, Cosmos_Group_V1beta1_QueryVotesByVoterResponse>]

  /// - Returns: Interceptors to use when invoking 'groupsByMember'.
  func makeGroupsByMemberInterceptors() -> [ClientInterceptor<Cosmos_Group_V1beta1_QueryGroupsByMemberRequest, Cosmos_Group_V1beta1_QueryGroupsByMemberResponse>]

  /// - Returns: Interceptors to use when invoking 'tallyResult'.
  func makeTallyResultInterceptors() -> [ClientInterceptor<Cosmos_Group_V1beta1_QueryTallyResultRequest, Cosmos_Group_V1beta1_QueryTallyResultResponse>]
}

internal final class Cosmos_Group_V1beta1_QueryClient: Cosmos_Group_V1beta1_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cosmos_Group_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the cosmos.group.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Group_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query is the cosmos.group.v1beta1 Query service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Cosmos_Group_V1beta1_QueryProvider: CallHandlerProvider {
  var interceptors: Cosmos_Group_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// GroupInfo queries group info based on group id.
  func groupInfo(request: Cosmos_Group_V1beta1_QueryGroupInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Group_V1beta1_QueryGroupInfoResponse>

  /// GroupPolicyInfo queries group policy info based on account address of group policy.
  func groupPolicyInfo(request: Cosmos_Group_V1beta1_QueryGroupPolicyInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Group_V1beta1_QueryGroupPolicyInfoResponse>

  /// GroupMembers queries members of a group
  func groupMembers(request: Cosmos_Group_V1beta1_QueryGroupMembersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Group_V1beta1_QueryGroupMembersResponse>

  /// GroupsByAdmin queries groups by admin address.
  func groupsByAdmin(request: Cosmos_Group_V1beta1_QueryGroupsByAdminRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Group_V1beta1_QueryGroupsByAdminResponse>

  /// GroupPoliciesByGroup queries group policies by group id.
  func groupPoliciesByGroup(request: Cosmos_Group_V1beta1_QueryGroupPoliciesByGroupRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Group_V1beta1_QueryGroupPoliciesByGroupResponse>

  /// GroupsByAdmin queries group policies by admin address.
  func groupPoliciesByAdmin(request: Cosmos_Group_V1beta1_QueryGroupPoliciesByAdminRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Group_V1beta1_QueryGroupPoliciesByAdminResponse>

  /// Proposal queries a proposal based on proposal id.
  func proposal(request: Cosmos_Group_V1beta1_QueryProposalRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Group_V1beta1_QueryProposalResponse>

  /// ProposalsByGroupPolicy queries proposals based on account address of group policy.
  func proposalsByGroupPolicy(request: Cosmos_Group_V1beta1_QueryProposalsByGroupPolicyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Group_V1beta1_QueryProposalsByGroupPolicyResponse>

  /// VoteByProposalVoter queries a vote by proposal id and voter.
  func voteByProposalVoter(request: Cosmos_Group_V1beta1_QueryVoteByProposalVoterRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Group_V1beta1_QueryVoteByProposalVoterResponse>

  /// VotesByProposal queries a vote by proposal.
  func votesByProposal(request: Cosmos_Group_V1beta1_QueryVotesByProposalRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Group_V1beta1_QueryVotesByProposalResponse>

  /// VotesByVoter queries a vote by voter.
  func votesByVoter(request: Cosmos_Group_V1beta1_QueryVotesByVoterRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Group_V1beta1_QueryVotesByVoterResponse>

  /// GroupsByMember queries groups by member address.
  func groupsByMember(request: Cosmos_Group_V1beta1_QueryGroupsByMemberRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Group_V1beta1_QueryGroupsByMemberResponse>

  /// TallyResult queries the tally of a proposal votes.
  func tallyResult(request: Cosmos_Group_V1beta1_QueryTallyResultRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Group_V1beta1_QueryTallyResultResponse>
}

extension Cosmos_Group_V1beta1_QueryProvider {
  internal var serviceName: Substring { return "cosmos.group.v1beta1.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GroupInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1beta1_QueryGroupInfoRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1beta1_QueryGroupInfoResponse>(),
        interceptors: self.interceptors?.makeGroupInfoInterceptors() ?? [],
        userFunction: self.groupInfo(request:context:)
      )

    case "GroupPolicyInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1beta1_QueryGroupPolicyInfoRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1beta1_QueryGroupPolicyInfoResponse>(),
        interceptors: self.interceptors?.makeGroupPolicyInfoInterceptors() ?? [],
        userFunction: self.groupPolicyInfo(request:context:)
      )

    case "GroupMembers":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1beta1_QueryGroupMembersRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1beta1_QueryGroupMembersResponse>(),
        interceptors: self.interceptors?.makeGroupMembersInterceptors() ?? [],
        userFunction: self.groupMembers(request:context:)
      )

    case "GroupsByAdmin":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1beta1_QueryGroupsByAdminRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1beta1_QueryGroupsByAdminResponse>(),
        interceptors: self.interceptors?.makeGroupsByAdminInterceptors() ?? [],
        userFunction: self.groupsByAdmin(request:context:)
      )

    case "GroupPoliciesByGroup":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1beta1_QueryGroupPoliciesByGroupRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1beta1_QueryGroupPoliciesByGroupResponse>(),
        interceptors: self.interceptors?.makeGroupPoliciesByGroupInterceptors() ?? [],
        userFunction: self.groupPoliciesByGroup(request:context:)
      )

    case "GroupPoliciesByAdmin":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1beta1_QueryGroupPoliciesByAdminRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1beta1_QueryGroupPoliciesByAdminResponse>(),
        interceptors: self.interceptors?.makeGroupPoliciesByAdminInterceptors() ?? [],
        userFunction: self.groupPoliciesByAdmin(request:context:)
      )

    case "Proposal":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1beta1_QueryProposalRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1beta1_QueryProposalResponse>(),
        interceptors: self.interceptors?.makeProposalInterceptors() ?? [],
        userFunction: self.proposal(request:context:)
      )

    case "ProposalsByGroupPolicy":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1beta1_QueryProposalsByGroupPolicyRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1beta1_QueryProposalsByGroupPolicyResponse>(),
        interceptors: self.interceptors?.makeProposalsByGroupPolicyInterceptors() ?? [],
        userFunction: self.proposalsByGroupPolicy(request:context:)
      )

    case "VoteByProposalVoter":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1beta1_QueryVoteByProposalVoterRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1beta1_QueryVoteByProposalVoterResponse>(),
        interceptors: self.interceptors?.makeVoteByProposalVoterInterceptors() ?? [],
        userFunction: self.voteByProposalVoter(request:context:)
      )

    case "VotesByProposal":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1beta1_QueryVotesByProposalRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1beta1_QueryVotesByProposalResponse>(),
        interceptors: self.interceptors?.makeVotesByProposalInterceptors() ?? [],
        userFunction: self.votesByProposal(request:context:)
      )

    case "VotesByVoter":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1beta1_QueryVotesByVoterRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1beta1_QueryVotesByVoterResponse>(),
        interceptors: self.interceptors?.makeVotesByVoterInterceptors() ?? [],
        userFunction: self.votesByVoter(request:context:)
      )

    case "GroupsByMember":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1beta1_QueryGroupsByMemberRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1beta1_QueryGroupsByMemberResponse>(),
        interceptors: self.interceptors?.makeGroupsByMemberInterceptors() ?? [],
        userFunction: self.groupsByMember(request:context:)
      )

    case "TallyResult":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1beta1_QueryTallyResultRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1beta1_QueryTallyResultResponse>(),
        interceptors: self.interceptors?.makeTallyResultInterceptors() ?? [],
        userFunction: self.tallyResult(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Cosmos_Group_V1beta1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'groupInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGroupInfoInterceptors() -> [ServerInterceptor<Cosmos_Group_V1beta1_QueryGroupInfoRequest, Cosmos_Group_V1beta1_QueryGroupInfoResponse>]

  /// - Returns: Interceptors to use when handling 'groupPolicyInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGroupPolicyInfoInterceptors() -> [ServerInterceptor<Cosmos_Group_V1beta1_QueryGroupPolicyInfoRequest, Cosmos_Group_V1beta1_QueryGroupPolicyInfoResponse>]

  /// - Returns: Interceptors to use when handling 'groupMembers'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGroupMembersInterceptors() -> [ServerInterceptor<Cosmos_Group_V1beta1_QueryGroupMembersRequest, Cosmos_Group_V1beta1_QueryGroupMembersResponse>]

  /// - Returns: Interceptors to use when handling 'groupsByAdmin'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGroupsByAdminInterceptors() -> [ServerInterceptor<Cosmos_Group_V1beta1_QueryGroupsByAdminRequest, Cosmos_Group_V1beta1_QueryGroupsByAdminResponse>]

  /// - Returns: Interceptors to use when handling 'groupPoliciesByGroup'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGroupPoliciesByGroupInterceptors() -> [ServerInterceptor<Cosmos_Group_V1beta1_QueryGroupPoliciesByGroupRequest, Cosmos_Group_V1beta1_QueryGroupPoliciesByGroupResponse>]

  /// - Returns: Interceptors to use when handling 'groupPoliciesByAdmin'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGroupPoliciesByAdminInterceptors() -> [ServerInterceptor<Cosmos_Group_V1beta1_QueryGroupPoliciesByAdminRequest, Cosmos_Group_V1beta1_QueryGroupPoliciesByAdminResponse>]

  /// - Returns: Interceptors to use when handling 'proposal'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeProposalInterceptors() -> [ServerInterceptor<Cosmos_Group_V1beta1_QueryProposalRequest, Cosmos_Group_V1beta1_QueryProposalResponse>]

  /// - Returns: Interceptors to use when handling 'proposalsByGroupPolicy'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeProposalsByGroupPolicyInterceptors() -> [ServerInterceptor<Cosmos_Group_V1beta1_QueryProposalsByGroupPolicyRequest, Cosmos_Group_V1beta1_QueryProposalsByGroupPolicyResponse>]

  /// - Returns: Interceptors to use when handling 'voteByProposalVoter'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeVoteByProposalVoterInterceptors() -> [ServerInterceptor<Cosmos_Group_V1beta1_QueryVoteByProposalVoterRequest, Cosmos_Group_V1beta1_QueryVoteByProposalVoterResponse>]

  /// - Returns: Interceptors to use when handling 'votesByProposal'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeVotesByProposalInterceptors() -> [ServerInterceptor<Cosmos_Group_V1beta1_QueryVotesByProposalRequest, Cosmos_Group_V1beta1_QueryVotesByProposalResponse>]

  /// - Returns: Interceptors to use when handling 'votesByVoter'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeVotesByVoterInterceptors() -> [ServerInterceptor<Cosmos_Group_V1beta1_QueryVotesByVoterRequest, Cosmos_Group_V1beta1_QueryVotesByVoterResponse>]

  /// - Returns: Interceptors to use when handling 'groupsByMember'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGroupsByMemberInterceptors() -> [ServerInterceptor<Cosmos_Group_V1beta1_QueryGroupsByMemberRequest, Cosmos_Group_V1beta1_QueryGroupsByMemberResponse>]

  /// - Returns: Interceptors to use when handling 'tallyResult'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTallyResultInterceptors() -> [ServerInterceptor<Cosmos_Group_V1beta1_QueryTallyResultRequest, Cosmos_Group_V1beta1_QueryTallyResultResponse>]
}
